name: Elixir CI

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

env:
  MIX_ENV: test

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Restore file modification timestamps
      uses: chetan/git-restore-mtime-action@v2

    - name: Build the Docker image
      run: |
        docker login -u ${{ github.actor }} -p ${{ github.token }} ghcr.io

        image="ghcr.io/${{ github.repository }}"
        sha_tag="${image}:${{ github.sha }}"
        branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
        branch_tag="${image}:${branch}"

        builder_tag="${branch_tag}_builder"
        main_builder_tag="${image}:main_builder"

        main_tag="${image}:main"

        docker buildx build --push --tag $builder_tag \
          --target builder \
          --cache-to type=inline \
          --cache-from $main_builder_tag \
          --cache-from $builder_tag \
          .

        docker buildx build --push --tag $branch_tag --tag $sha_tag \
          --target runner \
          --cache-to type=inline \
          --cache-from $builder_tag \
          --cache-from $main_tag \
          --cache-from $branch_tag \
          .

        if [ "${branch}" = "main" ]; then
          latest_tag="${image}:latest"
          docker tag $sha_tag $latest_tag
          docker push $latest_tag
        fi

  build_devcontainer:
    name: Build devcontainer
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build_docker_image.outputs.image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Restore file modification timestamps
      uses: chetan/git-restore-mtime-action@v2

    - id: build_docker_image
      name: Build the Docker image
      run: |
        docker login -u ${{ github.actor }} -p ${{ github.token }} ghcr.io

        image="ghcr.io/${{ github.repository }}"
        sha_tag="${image}:${{ github.sha }}"
        branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
        branch_tag="${image}:${branch}"

        devcontainer_tag="${branch_tag}_devcontainer"
        main_devcontainer_tag="${image}:main_devcontainer"

        docker buildx build --push --tag $devcontainer_tag \
          --target devcontainer \
          --build-arg USER_UID=1001 \
          --cache-to type=inline \
          --cache-from $main_devcontainer_tag \
          --cache-from $devcontainer_tag \
          .

        echo "image=${devcontainer_tag}" >> "$GITHUB_OUTPUT"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build_devcontainer
    container:
      image: ${{ needs.build_devcontainer.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
      options: --user 1001
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore file modification timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Install dependencies
        run: mix deps.get

      - name: Compiles without warnings
        run: mix compile --warnings-as-errors

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Check for retired dependencies
        run: mix hex.audit

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused

      - name: Run tests
        run: mix test
